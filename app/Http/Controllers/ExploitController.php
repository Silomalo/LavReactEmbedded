<?php

namespace App\Http\Controllers;

use App\Models\Exploit;
use App\Models\Image;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Storage;
use File;

class ExploitController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $students = Exploit::all();
        return response()->json([
            'status' => 200,
            'students' => $students,
        ]);

    }

    public function reverse()
    {
        $rev = Image::all();
        return response()->json([
            'status' => 200,
            'reverse' => $rev,
        ]);

    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $validator=Validator::make($request->all(),[
            'name'=>'required',
            'course'=>'required',
            'email'=>'required|email',
            'phone'=>'required|max:10',
        ]);
        if($validator->fails()){
            return response()->json(['validate_err'=>$validator->errors(),]);
        }else{
            $exploit = new Exploit;
            $exploit->name = $request->name;
            $exploit->course = $request->course;
            $exploit->email = $request->email;
            $exploit->phone = $request->phone;
            $exploit->save();
            return response()->json([
                'status' => 200,
                'message' => 'Student created successfully',
            ]);
        }

    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\Exploit  $exploit
     * @return \Illuminate\Http\Response
     */
    public function storeimage(Request $request)
    {
            $img = new Image();
           /*  if( ($request->file('file') != NULL)  ){
                //dd('hapo 2');
                if( ($request->file('file')->getSize())<900907152  ){   }else{ return redirect()->back() ->with('error', 'Too Large Project image; maxSize=10014kbs !');
            }}else{return redirect()->back() ->with('error', 'Project image cannot be Empty !'); }
 */
                if ($request->hasFile('pic')) {
                    $extension = $request->pic->getClientOriginalName();
                    $request->pic->storeAs('/public/album/', date("dmYhis").$extension);
                    $img->file = Storage::url( 'album/'.date("dmYhis").$extension);
                }

            $img->name=$request->input('myname');
            $img->desc=$request->input('desc');
            $img->save();
            return response()->json([
                'status' => 200,
                'message' => 'Image added successfuly',
            ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\Exploit  $exploit
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $student = Exploit::find($id);
        return response()->json([
            'status' => 200,
            'student' => $student,
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\Exploit  $exploit
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $validator=Validator::make($request->all(),[
            'name'=>'required',
            'course'=>'required',
            'email'=>'required|email',
            'phone'=>'required|max:10',
        ]);
        if($validator->fails()){
            return response()->json(['validate_err'=>$validator->errors(),]);
        }else{
            $exploit = Exploit::find($id);
            $exploit->name = $request->name;
            $exploit->course = $request->course;
            $exploit->email = $request->email;
            $exploit->phone = $request->phone;
            $exploit->update();
            return response()->json([
                'status' => 200,
                'message' => 'Student updated successfully',
            ]);
        }

    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\Exploit  $exploit
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $student = Exploit::find($id);
        $student->delete();
        return response()->json([
            'status' => 200,
            'message' => 'Student deleted successfully',
        ]);
    }
    public function destroyimg($id)
    {
        $img = Image::find($id);

        if(File::exists(public_path($img->file))){
            File::delete(public_path($img->file));
            $img->delete();
        }else{
            return response()->json([
                'status' => 401,
                'message' => 'Image not deleted',]);
        }
        return response()->json([
            'status' => 200,
            'message' => 'Image deleted successfully',
        ]);
    }
}
